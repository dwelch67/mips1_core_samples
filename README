
This is a simulator derived from what appears to be a mips1 core at
opencores:

http://opencores.org/project,m1_core

using verilator

http://www.veripool.org/wiki/verilator

as the verilog simulator utility.

The blinker directory contains an example from my pic32_samples repo,
I needed something to start with to get this simulator up and running.

I modified the m1_core opencores source code (which is GPL btw if
the files dont mention it) so that they would compile without warnings
or errors using verilator.  I also ripped out the m1_mmu.v and associated
file as it appeared to have hardcoded a program.  So the wishbone external
interface may or may not be gone depending on what I left.

The simulator expects intel hex format files.






In case you want to roll your own tools that you can compile these
examples with here are some notes.  Binutils is used by gcc and
gives you an assembler and linker which is all you need if assembly
language is what you are after.  If you run linux/Ubuntu you probably
already have a number of the development tools as you are probably
already a programmer/developer.  Things like build-essential, automake,
etc.  You will need bison and flex which you may not already have, and
for the more recent gcc versions libgmp3-dev, libmpfr-dev and libmpc-dev
(apt-get install all of these items BTW).

So binutils, at the time of this writing the most current is:
wget http://ftp.gnu.org/gnu/binutils/binutils-2.21.1a.tar.bz2

Note 2.22 fails to build for mips

> tar xjvf binutils-2.21.1a.tar.bz2
> cd binutils-2.21.1
> mkdir build
> cd build
> ../configure --target=mips-none-elf --prefix=/opt/mips-none-elf
this takes a bit, not long
> make
this takes longer depending on your machine, if you have multiple
cores then put the number of cores:
> make -j 4
this still takes a while but much faster in parallel.  you may figure
out on the way that you need to install something else and have to try
a few times.  using a directory (like build, it doesnt have to
be a subdir of the binutils sources) to configure/build in you can
easily just delete that directory instead of the whole binutils tree
to start over fresh.  when you get a clean build then
> make install
that might need a sudo on it...

Add this to your path so gas and ld are available for the gcc build.
> PATH=/opt/mips-none-elf/bin:$PATH

Now for gcc if you are interested
>wget http://ftp.gnu.org/gnu/gcc/gcc-4.6.1/gcc-core-4.6.1.tar.gz
>tar xzvf gcc-core-4.6.1.tar.gz
> cd gcc-4.6.1
> mkdir build
> cd build
>../configure --target=mips-none-elf --prefix=/opt/mips-none-elf \
>--disable-nls --enable-languages=c --disable-libssp --disable-libmudflap \
>--disable-libquadmath --without-headers --with-newlib
takes a while, not long
>make
takes a really long time, multi core or fast computer makes a huge
difference, put the number of cores in there
>make -j 4
same deal, if you didnt get libmpfr or libmpc for example you will
have to keep trying.  not long ago a single apt-get install libmpfr-dev
would give you the things you needed for building gcc, then it was that
you had to do both libmpfr and libgmp3, now you have to manually do all
three libmpfr-dev, libgmp3-dev and libmpc-dev.  to get a gcc 4.6 built.
of course I am running an older Ubuntu 10.04 LTS. and 10.10 on some
machines.  when gcc finishes building successfully
>make install
I dont know if that needs a sudo or not, it might.

Now anytime you want to use it PATH=/opt/mips-none-elf/bin:$PATH
tools are mips-none-elf-gcc, mips-none-elf-as, etc.

(last tested with gcc 4.6.3)

Just tested with gcc 4.7.0:

../configure --target=mips-none-elf --prefix=/opt/mips-none-elf \
--disable-libssp --disable-libc --disable-libgcc

important to use make all-gcc and install-gcc instead of make and make install



